리액트의 문제점

1. props(변수)를 부모에서 자식한테만 넘겨줄 수 있다.
props를 자식에서 부모로 넘겨줄 수 없다.

2. 만약에 컴포넌트가 한 30개 있는데
최상위 컴포넌트에서 최하위 컴포넌트로 변수를
props로 넘겨주려면 30개의 컴포넌트를 거쳐야해요
이거를 저희가 props drilling 불러요.
이게 리액트의 큰 성능 저하의 원인 중 하나에요

상태관리 라이브러리를 쓰는거에요.
리액트의 기본 내장 상태관리 함수는 contextAPI

contextAPI의 가장 치명적인 문제점으로는
저장소가 업데이트될 때마다 프로젝트 전체가 새로 리렌더링이 됨.
라이브러리는 이 문제점을 해결함

라이브러리(외부에서 땡겨오는 도구) 로는

리덕스까지 배우는데는 러닝커브가 조금 클거에요(학습 난이도)
리덕스를 배우고 나면 recoil 배우는데는 러닝커브가 엄~~~청 낮아요
redux를 안다고 가정하에 recoil 사용하는 법을배우는데

1시간도 안걸릴 수 있어요
redux, recoil
redux는 좀 많이 오래된 상태관리 라이브러리고
recoil은 최신 라이브러리에요

둘의 큰 차이점으로는
redux로 한 20줄정도 써야되는걸
recoil 2~3줄 코드로 구현이 가능해요

이제 리덕스는 점점 사용하는 회사가 없어지고
(수면속으로 사라지고 있는 기술)
그래도 아직은 여전히 엄청나게 사용되고 있는 기술이다.
모르면 안된다. 모르면 취직하기 어렵다. 아.직.은

리덕스가 상태관리 라이브러리의 태초급의 상태관리 라이브러리이기 때문에
사용하는 회사가 아직 엄청나게 많아요

리덕스를 모른채로 리코일을 사용해도 되는데
개인적으로 리덕스를 먼저 해보고 리코일을 하는걸 추천해요
따지고보면 컨택스트api, 리덕스, 리코일하고 사용되는 코드 구조가
거의 비슷하고 --> 리코일로 넘어갈수록 코드량이 줄어들어요

리코일을 한 번 경험해보면 역체감이 심해가지고
리덕스 이딴거 왜 쓰지? 하고 안배울려고 해요

뭔가 변화가 더딘 회사나 리팩토링 하기에 코드량이 감당이 안되는 회사는
아직 리덕스를 쓰고 있어요.

근데 신기술 도입이 빠른 회사같은 경우는
리덕스에서 리코일로 리팩토링까지 진행하면서
리코일을 도입하는 회사도 있어요

새로 프로젝트를 진행하는 회사도
보통 이제 리덕스로 시작안하고 리코일로 시작하고요 대부분

코드가 엄청나게 단축이 됩니다.
이거를 저희가 보일러 플레이트 라는거를 해결한다고 불러요.